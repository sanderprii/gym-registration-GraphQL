openapi: 3.0.0
info:
  title: Gym Registration API
  description: API for registering and managing gym users. Some endpoints require bearer authentication.
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Local server

tags:
  - name: Users
    description: Endpoints related to gym users
  - name: Memberships
    description: Manage gym memberships
  - name: Sessions
    description: Manage gym sessions

paths:
  /users:
    get:
      summary: Get all users
      operationId: getUsers
      tags:
        - Users
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      summary: Register a new user
      operationId: createUser
      tags:
        - Users
      security:
        - bearerAuth: []  # ⬅ BEARER TOKEN VAJALIK
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request (invalid input)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /users/{userId}:
    get:
      summary: Get a specific user by ID
      operationId: getUserById
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      summary: Update a user's details
      operationId: updateUser
      tags:
        - Users
      security:
        - bearerAuth: []  # ⬅ BEARER TOKEN VAJALIK
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request (invalid input)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      summary: Delete a user by ID
      operationId: deleteUser
      tags:
        - Users
      security:
        - bearerAuth: []  # ⬅ BEARER TOKEN VAJALIK
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: User deleted successfully
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /memberships:
    get:
      summary: Get all gym memberships
      operationId: getMemberships
      tags:
        - Memberships
      responses:
        "200":
          description: List of memberships
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Membership"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      summary: Create a new membership
      operationId: createMembership
      tags:
        - Memberships
      security:
        - bearerAuth: []  # ⬅ BEARER TOKEN VAJALIK
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Membership"
      responses:
        "201":
          description: Membership created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Membership"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /sessions:
    get:
      summary: Get current session info
      description: Returns info about the currently authenticated session (requires token).
      tags:
        - Sessions
      operationId: getCurrentSession
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Current session details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      summary: Log in / create a session
      description: Authenticates user with email+password and returns a token (public).
      tags:
        - Sessions
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "201":
          description: Session created (login successful)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    put:
      summary: Refresh current session
      description: Refreshes or extends current session token (requires token).
      tags:
        - Sessions
      operationId: refreshSession
      security:
        - bearerAuth: [ ]
      responses:
        "200":
          description: Session refreshed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionResponse"
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    delete:
      summary: Log out / delete current session
      description: Invalidates the current session token (requires token).
      tags:
        - Sessions
      operationId: logout
      security:
        - bearerAuth: [ ]
      responses:
        "204":
          description: Session deleted (logged out)
        "401":
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
          example: "abc123"
        name:
          type: string
          description: User's full name
          example: "John Doe"
        email:
          type: string
          format: email
          description: User email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          description: User password (write-only)
          example: "StrongPassword123"


    Membership:
      type: object
      properties:
        id:
          type: string
          example: "m123456"
        type:
          type: string
          example: "Premium"
        price:
          type: number
          format: float
          example: 29.99
        durationMonths:
          type: integer
          example: 6

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "StrongPassword123"

    SessionResponse:
      type: object
      properties:
        token:
          type: string
          description: Bearer token to be used for authenticated requests
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresAt:
          type: string
          format: date-time
          description: Expiration time of the token
          example: "2024-02-12T12:00:00Z"
        user:
          $ref: "#/components/schemas/User"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "User not found"
        statusCode:
          type: integer
          example: 404

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
